---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: rmp-api
  namespace: default
spec:
  entryPoints:
    - websecure
  routes:
  - match: HostRegexp(`rmp.lit.codes`, `chartlib.com`, `{subdomain:[a-z]+}.chartlib.com`)
    kind: Rule
    services:
    - name: rmp
      port: 4000
  tls:
    secretName: cloudflarecrtsecret
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: grafana
  namespace: default
spec:
  entryPoints:
    - websecure
  routes:
  - match: HostRegexp(`monitor.lit.codes`)
    kind: Rule
    services:
    - name: prometheus-opera-grafana
      port: 80
      namespace: monitoring
  tls:
    secretName: cloudflarecrtsecret
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: negin-dev
  namespace: default
spec:
  entryPoints:
    - websecure
  routes:
  - match: HostRegexp(`negin-dev.lit.codes`)
    middlewares:
    - name: dev-basic-auth
      namespace: default
    kind: Rule
    services:
    - name: negin-dev
      port: 3000
      namespace: development
  tls:
    secretName: cloudflarecrtsecret
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: amin-dev
  namespace: default
spec:
  entryPoints:
    - websecure
  routes:
  - match: HostRegexp(`amin-dev.lit.codes`)
    middlewares:
    - name: dev-basic-auth
      namespace: default
    kind: Rule
    services:
    - name: amin-dev
      port: 3000
      namespace: development
  tls:
    secretName: cloudflarecrtsecret
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: saeed-dev
  namespace: default
spec:
  entryPoints:
    - websecure
  routes:
  - match: HostRegexp(`saeed-dev.lit.codes`)
    middlewares:
    - name: dev-basic-auth
      namespace: default
    kind: Rule
    services:
    - name: saeed-dev
      port: 3000
      namespace: development
  tls:
    secretName: cloudflarecrtsecret
---
# More info: https://docs.traefik.io/middlewares/basicauth/
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: dev-basic-auth
  namespace: default
spec:
  basicAuth:
    secret: dev-secret
    namespace: default
---
# Note: in a kubernetes secret the string (e.g. generated by htpasswd) must be base64-encoded first.
# To create an encoded user:password pair, the following command can be used:
# htpasswd -nb user password | openssl base64

apiVersion: v1
kind: Secret
metadata:
  name: dev-secret
  namespace: default

data:
  users: |
    bmVnaW46JGFwcjEkTlZ2cVBiam8kOXNDaUo4SmdYUFJrTnpQTXROcS5YLwoKYW1pbjokYXByMSR5
    VVBSdnlocyRzUElqLko5V0NEY1o3NE9iL080ZDAwCgpzYWVlZDokYXByMSQ3Z1FvTHdjYSRDU2Fh
    cmc5RGRWbkd6QXpEM3JEckYxCgo=
